prompt_name: "Diagnose Lotus Bugs : Crash Langue & Refresh Musique"
description: "Analyser et diagnostiquer deux bugs critiques dans l'application Lotus avant toute correction."
context: |
  Application : Lotus ‚Äî lecteur musical Android cod√© en Kotlin avec Jetpack Compose, MVVM, Koin, Realm, et SharedPreferences.
  Fonctionnalit√©s cl√©s : param√©trage des langues, affichage de la biblioth√®que musicale, backend service audio.

  üîß Bug 1 : Crash au changement de langue
  - Comportement : L‚Äôapplication se ferme brutalement apr√®s avoir cliqu√© sur l‚Äôoption de s√©lection de langue dans les param√®tres.
  - Hypoth√®ses : 
    - Contexte Android (`Context`) mal pass√© ou non mis √† jour apr√®s changement de `Locale`.
    - Fichier de traduction (`strings.xml`) manquant ou mal form√© (balises XML invalides, caract√®res sp√©ciaux non √©chapp√©s).
    - Exception non g√©r√©e dans un `Service` audio lors de la recr√©ation de l‚Äô`Activity`.

  üîÅ Bug 2 : Affichage des musiques ne se recharge pas
  - Comportement : Les musiques n‚Äôapparaissent pas sans actualisation manuelle apr√®s lancement ou navigation.
  - Hypoth√®ses : 
    - `Flow` ou `StateFlow` dans le ViewModel ne s‚Äôactive pas au premier chargement.
    - `LazyColumn` ou `collectAsStateWithLifecycle` ne d√©tecte pas les changements (observer d√©tach√© ou cycle de vie mal g√©r√©).
    - Cache Realm ou MediaStore bloque les nouvelles donn√©es jusqu‚Äô√† un refresh manuel.

instructions: |
  - √âtape 1 : Diagnostiquer le bug du crash langue  
    - Localiser le code g√©rant le `LocalePicker` (ex. : `SettingsScreen.kt`, `MainActivity.kt`).  
    - Ajouter des logs pour tracer le `Context` avant et apr√®s le changement de langue :  
      ```kotlin
      Log.d("LocaleDebug", "Contexte avant : ${context.javaClass.simpleName}")
      updateLocale(context, languageCode)
      Log.d("LocaleDebug", "Contexte apr√®s : ${context.javaClass.simpleName}")
      ```  
    - V√©rifier l‚Äôint√©grit√© des fichiers de traduction (`values-fr/strings.xml`, `values-ru/strings.xml`, `values-uk/strings.xml`) :  
      - Parser chaque fichier pour d√©tecter les erreurs XML (balises non ferm√©es, caract√®res sp√©ciaux non √©chapp√©s).  
    - Capturer les logs d‚Äôerreur via Logcat lors du crash et identifier l‚Äôexception.  

  - √âtape 2 : Diagnostiquer le bug du refresh musique  
    - Inspecter le ViewModel alimentant le screen principal (ex. : `MusicViewModel.kt`).  
    - Ajouter des logs pour suivre l‚Äô√©mission des donn√©es :  
      ```kotlin
      Log.d("MusicViewModel", "√âmission de musicList : ${musicList.size}")
      ```  
    - V√©rifier le comportement de `collectAsStateWithLifecycle` dans le Composable principal (ex. : `MainScreen.kt`) :  
      - Ajouter un log dans le `LaunchedEffect` ou √† chaque rendu :  
        ```kotlin
        Log.d("MainScreen", "Rendu avec ${musicList.size} musiques")
        ```  
    - Tester si un re-scan manuel (via une action UI) d√©clenche une mise √† jour, et logger le r√©sultat.  

  - √âtape 3 : G√©n√©rer un rapport  
    - Cr√©er un fichier `BUG_DIAGNOSIS.md` avec :  
      - D√©tails des logs pour le crash langue (contexte, exception).  
      - D√©tails des logs pour le refresh musique (√©missions, rendus).  
      - Confirmation ou invalidation des hypoth√®ses initiales.  
      - Proposer une liste de causes probables bas√©es sur les logs.  

parameters:
  temperature: 0.3
  max_tokens: 1024
