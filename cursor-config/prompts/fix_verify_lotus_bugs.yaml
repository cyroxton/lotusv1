prompt_name: "Fix and Verify Lotus Bugs : Crash Langue & Refresh Musique"
description: "Appliquer les corrections aux bugs critiques de Lotus et v√©rifier leur bon fonctionnement."
context: |
  Application : Lotus ‚Äî lecteur musical Android cod√© en Kotlin avec Jetpack Compose, MVVM, Koin, Realm, et SharedPreferences.
  Fonctionnalit√©s cl√©s : param√©trage des langues, affichage de la biblioth√®que musicale, backend service audio.

  üîß Bug 1 : Crash au changement de langue
  - Probl√®me : L‚Äôapplication se ferme brutalement apr√®s un changement de langue via `LocalePicker`.
  - Causes probables (d‚Äôapr√®s BUG_DIAGNOSIS.md) :
    - Pas de recr√©ation s√©curis√©e apr√®s `AppCompatDelegate.setApplicationLocales()`.
    - Perte de r√©f√©rences d‚Äôobjets lors de la recr√©ation.
    - Incompatibilit√© avec `ComponentActivity`.
    - Absence de sauvegarde d‚Äô√©tat.
  - Modifications propos√©es :
    - Ajouter `recreate()` dans `LanguageManager.kt`.
    - Adapter pour `ComponentActivity` avec gestion manuelle du `Locale`.
    - Impl√©menter `onSaveInstanceState` dans `MainActivity.kt`.

  üîÅ Bug 2 : Affichage des musiques ne se recharge pas
  - Probl√®me : Les musiques n‚Äôapparaissent pas sans actualisation manuelle.
  - Causes probables (d‚Äôapr√®s BUG_DIAGNOSIS.md) :
    - Pas de m√©canisme r√©actif dans `TrackRepository`.
    - `MusicScanner` ne notifie pas `TrackRepository`.
    - Absence de cache d‚Äôinvalidation.
    - `StateFlow` mal configur√© dans `PlayerViewModel`.
  - Modifications propos√©es :
    - Rendre `TrackRepository` r√©actif avec un `Flow`.
    - Ajouter une notification dans `MusicScanner`.
    - Impl√©menter un cache invalidable dans `TrackRepositoryImpl`.
    - Mettre √† jour `PlayerViewModel` avec `StateFlow`.

instructions: |
  - √âtape 1 : Corriger le bug du crash langue
    1. Ouvrir `LanguageManager.kt` et modifier la fonction `setLanguage` :
       ```kotlin
       fun setLanguage(context: Context, languageCode: String) {
           prefs.edit().putString("language", languageCode).apply()
           val appLocale: LocaleListCompat = LocaleListCompat.forLanguageTags(languageCode)
           AppCompatDelegate.setApplicationLocales(appLocale)
           if (context is Activity) {
               context.recreate() // Force la recr√©ation s√©curis√©e
           }
       }
       ```
    2. Dans `MainActivity.kt`, ajouter la gestion de l‚Äô√©tat :
       ```kotlin
       override fun onSaveInstanceState(outState: Bundle) {
           super.onSaveInstanceState(outState)
           outState.putString("language", LanguageManager().language)
       }
       override fun onCreate(savedInstanceState: Bundle?) {
           super.onCreate(savedInstanceState)
           installSplashScreen()
           enableEdgeToEdge()
           val languageManager: LanguageManager = get()
           savedInstanceState?.getString("language")?.let { languageManager.language = it }
           languageManager.language = languageManager.language
           // ...
       }
       ```
    3. V√©rification :
       - Lancer l‚Äôapp, changer la langue via `LanguageSettings.kt`, et v√©rifier dans Logcat qu‚Äôaucun crash n‚Äôappara√Æt (chercher `LocaleDebug` ou exceptions).
       - Confirmer que l‚ÄôUI se recharge correctement (ex. : texte en fran√ßais si `fr` s√©lectionn√©).

  - √âtape 2 : Corriger le bug du refresh musique
    1. Modifier `TrackRepository.kt` pour un `Flow` r√©actif :
       ```kotlin
       interface TrackRepository {
           fun getTracks(): Flow<List<Track>>
           fun getFoldersWithAudio(): Flow<Set<String>>
       }
       ```
    2. Mettre √† jour `TrackRepositoryImpl.kt` avec un cache invalidable :
       ```kotlin
       class TrackRepositoryImpl(
           private val context: Context,
           private val settings: Settings
       ) : TrackRepository {
           private val _tracks = MutableStateFlow<List<Track>>(emptyList())
           override fun getTracks(): Flow<List<Track>> = _tracks.asStateFlow()

           fun invalidateCache() {
               viewModelScope.launch {
                   _tracks.value = loadTracksFromMediaStore()
               }
           }

           private fun loadTracksFromMediaStore(): List<Track> {
               // Logique existante pour charger les pistes
               return emptyList() // Remplace par ton code
           }
       }
       ```
    3. Modifier `MusicScanner.kt` pour notifier apr√®s scan :
       ```kotlin
       suspend fun refreshMedia(showMessages: Boolean = true, onComplete: () -> Unit = {}) {
           // Scan des fichiers musicaux
           trackRepository.invalidateCache() // Notifie le repository
           onComplete()
       }
       ```
    4. Mettre √† jour `PlayerViewModel.kt` :
       ```kotlin
       val tracks = trackRepository.getTracks().stateIn(
           scope = viewModelScope,
           started = SharingStarted.WhileSubscribed(5000),
           initialValue = emptyList()
       )
       ```
    5. V√©rification :
       - Lancer l‚Äôapp et v√©rifier dans Logcat que `MusicViewModel` √©met des donn√©es (`√âmission de musicList`).
       - Ajouter un `LaunchedEffect` dans `MainScreen.kt` pour tester :
         ```kotlin
         LaunchedEffect(Unit) {
             viewModel.tracks.collect { Log.d("MainScreen", "Rendu avec ${it.size} musiques") }
         }
         ```
       - Confirmer que la `LazyColumn` affiche les musiques sans refresh manuel.

  - √âtape 3 : Valider les corrections
    1. Compiler et tester :
       - Ex√©cuter `./gradlew.bat build` et v√©rifier ‚ÄúBUILD SUCCESSFUL‚Äù.
       - Lancer l‚Äôapp avec `./gradlew.bat installDebug` et tester les deux fonctionnalit√©s.
    2. Mettre √† jour le rapport :
       - Ajouter les r√©sultats des v√©rifications dans `BUG_DIAGNOSIS.md` (succ√®s/√©chec, logs pertinents).
    3. Sauvegarder sur GitHub :
       ```bash
       git add .
       git commit -m "fix: resolve crash langue and music refresh bugs based on diagnosis"
       git pull origin main
       git push origin main
       ```

parameters:
  temperature: 0.3
  max_tokens: 2048
